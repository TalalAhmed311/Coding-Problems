# Do not edit the class below except for
# the insert, contains, and remove methods.
# Feel free to add new properties and methods
# to the class.
class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

    def insert(self, value):
        # Write your code here.
        # Do not edit the return statement of this method.
        curr = self
        while True:
            
            if value<curr.value:

                if curr.left is None:
                    curr.left = BST(value=value)
                    break

                curr = curr.left
            else:
                if curr.right is None:
                    curr.right = BST(value=value)
                    break
                curr = curr.right
                    
                
            
        return self

    def contains(self, value):
        # Write your code here.
        
        curr = self
        while curr is not None:
            if curr.value==value:
                return True
            if curr.value>value:
                curr = curr.left
            else:
                curr = curr.right
        return False
                

    def remove(self, value,parent=None):
        # Write your code here.
        # Do not edit the return statement of this method.
        curr = self
        while curr is not None:
            if curr.value>value:
                parent = curr
                curr = curr.left
            elif curr.value<value:
                parent = curr
                curr = curr.right
            else:

                if curr.left is not None and curr.right is not None:
                    curr.value = curr.right.getMinValue()
                    curr.right.remove(curr.value,curr)
                elif parent is None:
                    if curr.left is not None:
                        curr.value = curr.left.value
                        curr.right = curr.left.right
                        curr.left = curr.left.left
                    elif curr.right is not None:
                        curr.value = curr.right.value
                        curr.left = curr.right.left
                        curr.right = curr.right.right
                    else:
                        pass
                elif parent.left == curr:
                    parent.left = (curr.left if curr.left is not None else curr.right)
                elif parent.right == curr:
                    parent.right = (curr.left if curr.left is not None else curr.right)
                break
        return self
                    
                    
            

    def getMinValue(self):
        curr = self
        while curr.left is not None:
            curr = curr.left

        return curr.value
        
        
